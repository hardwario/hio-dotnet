@using Services

@inject ConsoleService ConsoleService

<RadzenRow Style=@getLeftMargin>
    <RadzenColumn>
        <div class="footer-items">
            <div class="footer-item-wrapper">
                @if (ConsoleService.IsConsoleListening)
                {
                    <div class="dot green">
                    </div>
                }
                else
                {
                    <div class="dot red">
                    </div>
                }
                <RadzenText Text="@connectionStatus" class="footer-item-text" />
            </div>

            <div class="footer-item-wrapper">
                @if (ConsoleService.IsPPK2Connected)
                {
                    <div class="dot green">
                    </div>
                }
                else
                {
                    <div class="dot red">
                    </div>
                }
                <RadzenText Text="@ppkconnectionStatus" class="footer-item-text" />
            </div>

            <div class="footer-item-wrapper no-border">
                @if (ConsoleService.IsDeviceOn)
                {
                    <div class="dot green">
                    </div>
                }
                else
                {
                    <div class="dot red">
                    </div>
                }
                <RadzenText Text="@ppkVoltageStatus" class="footer-item-text" />
            </div>
        </div>
    </RadzenColumn>
</RadzenRow>

@code {

    [Parameter] public int LeftMargin { get; set; } = 5;

    string getLeftMargin => $"margin-left:{LeftMargin}px;";
    bool sidebarExpanded = true;

    public string connectionStatus => ConsoleService.IsConsoleListening ? $"JLink: Connected" : "JLink: Not Connected";
    public string ppkconnectionStatus => ConsoleService.IsPPK2Connected ? $"PPK2: Connected" : "PPK2: Not Connected";
    public string ppkVoltageStatus => ConsoleService.IsDeviceOn ? $"PPK2 Voltage On: {ConsoleService.DeviceVoltage} mV " : $"PPK2 Voltage Off: {ConsoleService.DeviceVoltage} mV";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ConsoleService.OnIsJLinkConnected += Refresh;
        ConsoleService.OnIsJLinkDisconnected += Refresh;
        ConsoleService.OnIsPPKConnected += Refresh;
        ConsoleService.OnIsPPKDisconnected += Refresh;
        ConsoleService.OnIsPPKVoltageOutputConnected += Refresh;
        ConsoleService.OnIsPPKVoltageOutputDisconnected += Refresh;
        ConsoleService.OnIsPPKVoltageChanged += Refresh;
    }

    private void Refresh(object sender, bool e)
    {
        InvokeAsync(StateHasChanged);
    }

    public async Task ChangeLeftMargin(int margin)
    {
        LeftMargin = margin;
        await InvokeAsync(StateHasChanged);
    }
}
