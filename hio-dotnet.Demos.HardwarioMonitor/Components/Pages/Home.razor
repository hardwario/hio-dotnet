@using Services
@page "/"

@inject ConsoleService ConsoleService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
    <!-- Loading overlay -->
    @if (isBusy)
    {
        <RadzenCard Style="z-index: 3; text-align: center; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, .5)">
            <div style="display: flex; justify-content: center; align-items: center; height: 100%; width: 100%;">
                <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                    <Template>Wait</Template>
                </RadzenProgressBarCircular>
            </div>
        </RadzenCard>
    }
</RadzenStack>

<RadzenLayout Style="height: 100%; grid-template-rows: 1fr; grid-template-columns: 1fr auto; grid-template-areas: 'rz-body rz-sidebar'">
    <RadzenSidebar Style="padding: 5px;">
        @if (!ConsoleService.IsPPK2Connected())
        {
            <RadzenButton Click="OnInitPPK2Handler" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
        }
        else
        {
            <RadzenButton Click="OnInitPPK2Handler" Disabled="true" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
        }
        <RadzenNumeric @bind-Value=Voltage Min="3300" Max="4000" Style="margin-top: 5px; width: 100%;"></RadzenNumeric>
        <RadzenButton Click="SetPPK2Voltage" Style="margin-top: 5px; width: 100%;">Set Voltage</RadzenButton>
        @if (!ConsoleService.IsDeviceOn)
        {
            <RadzenButton Click="StartPPK2" Style="margin-top: 5px; width: 100%;">Turn On</RadzenButton>
        }
        else
        {
            <RadzenButton Click="StopPPK2" Style="margin-top: 5px; width: 100%;">Turn Off</RadzenButton>
        }

        @if (!ConsoleService.IsConsoleListening)
        {
            <RadzenButton Click="OnInitConsoleHandler" Style="margin-top: 5px; width: 100%;">Init Console</RadzenButton>
        }
        else
        {
            <RadzenButton Click="OnInitConsoleHandler" Disabled="true" Style="margin-top: 5px; width: 100%;">Init Console</RadzenButton>
        }

        <RadzenButton Click="SaveShellToFile" Style="margin-top: 5px; width: 100%;">Save Shell To File</RadzenButton>
        <RadzenButton Click="SaveLogToFile" Style="margin-top: 5px; width: 100%;">Save Log To File</RadzenButton>
    </RadzenSidebar>
    <RadzenBody>
        <RadzenRow Style="height: 100%;">
            <RadzenColumn Style="height: 100%;">
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenHeading Size="H2">Device Status</RadzenHeading>
                        <span>@ConsoleService.IsPPK2Connected()</span>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenHeading Size="H2">Device Voltage</RadzenHeading>
                        <span>@ConsoleService.DeviceVoltage mV</span>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow>
                    <RadzenColumn>
                        <ConsoleComponent @ref=consoleComponentRef Output="@ConsoleService.ConsoleOutputShell" OnSendCommand="HandleSendCommand" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <ConsoleComponent @ref=consoleComponentRef Output="@ConsoleService.ConsoleOutputLog" HideCommandLine="true" />
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow>
                    <RadzenColumn>
                        <hio_dotnet.UI.BlazorComponents.Radzen.CHESTER.Configs.LoRa.LoRaWANConfigCompleteForm @ref=LoRaConfigFormRef />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenButton Click="ApplyLoRaSettings">Apply LoRa Settings</RadzenButton>
                    </RadzenColumn>
                </RadzenRow>

            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>


@code {
    private bool isBusy = false;

    hio_dotnet.UI.BlazorComponents.Radzen.CHESTER.Configs.LoRa.LoRaWANConfigCompleteForm? LoRaConfigFormRef;

    private List<string> outputConfig = new List<string>();
    private List<string> output = new List<string>();
    ConsoleComponent? consoleComponentRef;

    public int Voltage { get; set; } = 3300;

    protected override void OnInitialized()
    {
        ConsoleService.InitArrays();
        ConsoleService.NewRTTMessageLineReceived += NewLineReceived;
    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnInitConsoleHandler()
    {
        await ConsoleService.StartListening();
    }

    public async Task OnInitPPK2Handler()
    {
        await ConsoleService.FindAndConnectPPK();
    }

    public async Task SetPPK2Voltage()
    {
        await ConsoleService.SetPPK2Voltage(Voltage);
    }

    public async Task StartPPK2()
    {
        await ConsoleService.TurnOnPower();
    }

    public async Task StopPPK2()
    {
        await ConsoleService.TurnOffPower();
    }

    public void NewLineReceived(object sender, Tuple<string, MultiRTTClientBase> data)
    {
        if (data?.Item2.Channel == 0)
        {
            var line = $"{data.Item1}";
            Console.WriteLine(line);
            InvokeAsync(async () =>
            {
                if (line.Contains("config") && LoRaConfigFormRef != null)
                {
                    if (line.Contains("lrw"))
                        await LoRaConfigFormRef.ParseLine(line);
                }
                await InvokeAsync(StateHasChanged);
            });
        }
        else if (data?.Item2.Channel == 1)
        {
            Console.WriteLine();
            InvokeAsync(async () =>
            {
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task ApplyLoRaSettings()
    {
        var cfg = string.Empty;
        var lines = new List<string>();
        if (LoRaConfigFormRef != null)
            cfg = LoRaConfigFormRef.Config.GetWholeConfig();

        // parse each line and send it as command
        if (!string.IsNullOrEmpty(cfg))
        {
            lines = cfg.Split("\n").ToList();
            foreach (var line in lines)
            {
                await ConsoleService.SendCommand(line);
            }
        }
    }

    private async Task HandleSendCommand(string command)
    {
        if (command.Contains("config") && LoRaConfigFormRef != null)
        {
            LoRaConfigFormRef.Config.ParseLine(command);
        }

        await ConsoleService.SendCommand(command.ToLower().Trim() + "\n");
    }

    private async Task SaveLogToFile()
    {
        await ConsoleService.SaveConsoleLogToFile();
    }

    private async Task SaveShellToFile()
    {
        await ConsoleService.SaveConsoleShellToFile();
    }

}