@using Services
@using Microsoft.JSInterop

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime

@if (SessionId == Guid.Empty)
{
    <RadzenButton Text="Connect To Session" Disabled="@Disabled" Click="Login" Style="@Style" class="@Class" ButtonStyle="@ButtonStyle" />
}
else
{
    <RadzenButton Text="Session Details" Disabled="@Disabled" Click="OpenDetails" Style="@Style" class="@Class" ButtonStyle="@ButtonStyle" />
}

@code {
    [Parameter] public string Style { get; set; } = string.Empty;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public ButtonStyle ButtonStyle { get; set; } = ButtonStyle.Primary;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Guid SessionId { get; set; } = Guid.Empty;
    [Parameter] public EventCallback<Guid> OnConnectToRemoteSession { get; set; }
    [Parameter] public EventCallback<Guid> OnCancelRemoteSession { get; set; }

    public string newSessionId = string.Empty;

    private async Task Login()
    {
        var result = await DialogService.OpenAsync("Login To Cloud", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenRow>
                <RadzenColumn Size="3">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenText Text="Session Id:" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="9">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenTextBox Name="sessionId" @bind-Value="@newSessionId" Style="width: 100%;" />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenButton Text="Connect" Click="() => ds.Close(true)" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

        if (result == true)
        {
            if (OnConnectToRemoteSession.HasDelegate)
            {
                try
                {
                    var id = Guid.Parse(newSessionId);
                    await OnConnectToRemoteSession.InvokeAsync(id);
                }
                catch (Exception ex)
                {
                    ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Invalid Session Id" });
                    return;
                }
                
                await Task.Delay(10);
            }
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e, DialogService ds)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("document.activeElement.blur");
            ds.Close(true);
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private async Task OpenDetails()
    {
        var result = await DialogService.OpenAsync("Session Details", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenRow>
                <RadzenColumn Size="3">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenText Text="@($"Session Id:{SessionId}")" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="9">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <hio_dotnet.UI.BlazorComponents.RadzenLib.Common.Buttons.CopyButton TextToCopy="@SessionId.ToString()" IsJustIcon="true"/> 
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenButton Text="Stop Session" Click="@(async () => await OnCancel(ds))" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

    }

    private async Task OnCancel(DialogService ds)
    {
        if (OnCancelRemoteSession.HasDelegate)
        {
            await OnCancelRemoteSession.InvokeAsync(SessionId);
            ds.Close(true);
        }
    }
}
