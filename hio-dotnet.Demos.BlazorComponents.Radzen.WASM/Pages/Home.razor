@using hio_dotnet.Common.Config;
@using hio_dotnet.Common.Enums;
@using hio_dotnet.Common.Enums.LoRaWAN;
@using hio_dotnet.Common.Enums.LTE;
@using hio_dotnet.UI.BlazorComponents.Radzen.Common.Console
@using hio_dotnet.UI.BlazorComponents.Radzen.CHESTER
@using hio_dotnet.UI.BlazorComponents.Radzen.CHESTER.Configs.Common
@using hio_dotnet.UI.BlazorComponents.Radzen.CHESTER.Configs.LoRa
@using hio_dotnet.UI.BlazorComponents.Radzen.CHESTER.Configs.LTE

@inject NotificationService NotificationService

@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SearchForChesters @ref=sfcRef/>

    <hr />

<ConsoleComponent Output="@consoleOutput" OnSendCommand="@HandleSendCommand" />

<hr />

<RadzenCard>
        
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Antenna Type</RadzenText>
    <AntennaTypeSelector Value="@Antenna" ValueChanged="OnAntennaChangedHandler" Align="left" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LoRaWAN Band</RadzenText>
    <LoRaWANBandSelector Value="@LRWBand" ValueChanged="OnLoRaWANBandChangedHandler" Align="left" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LoRaWAN Mode</RadzenText>
    <LoRaWANModeSelector Value="@LRWMode" ValueChanged="OnLoRaWANModeChangedHandler" Align="left" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LoRaWAN Network</RadzenText>
    <LoRaWANNetworkSelector Value="@LRWNetwork" ValueChanged="OnLoRaWANNetworkChangedHandler" Align="left" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LoRaWAN Class</RadzenText>
    <LoRaWANClassSelector Value="@LRWClass" ValueChanged="OnLoRaWANClassChangedHandler" Align="left" />
    
    <LoRaWANDevEUI Value="@DevEUI" ValueChanged="OnDevEUIChangedHandler" Align="left" />
    <LoRaWANAppKey Value="@AppKey" ValueChanged="OnAppKeyChangedHandler" Align="left" />
    <LoRaWANJoinEUI Value="@JoinEUI" ValueChanged="OnJoinEUIChangedHandler" Align="left" />
    <LoRaWANDevAddr Value="@DevAddr" ValueChanged="OnDevAddrChangedHandler" Align="left" />
    <LoRaWANAppSKey Value="@AppSKey" ValueChanged="OnAppSKeyChangedHandler" Align="left" />
    <LoRaWANNwkSKey Value="@NwkSKey" ValueChanged="OnNwkSKeyChangedHandler" Align="left" />

</RadzenCard>

<RadzenCard>
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LTE Authorization Type</RadzenText>
    <LTEAuthorizationSelector Value="@LTEAuthorization" ValueChanged="OnLTEAuthChangedHandler" Align="left" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LTE APN</RadzenText>
    <RadzenTextBox Placeholder="APN..." @bind-Value="LTEAPN" Style="width: 100%" aria-label="LTE APN" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LTE Username</RadzenText>
    <RadzenTextBox Placeholder="Username..." @bind-Value="LTEUsername" Style="width: 100%" aria-label="LTE Username" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">LTE APN</RadzenText>
    <RadzenPassword @bind-Value="LTEPassword" Style="width: 100%" aria-label="LTE Password" />
</RadzenCard>

<RadzenCard>
    <LoRaWANConfigCompleteForm @ref=LRWConfigRef />
</RadzenCard>

<RadzenCard>
    <LTEConfigCompleteForm @ref=LTEConfigRef />
</RadzenCard>

<hr />
<CopyButton TextToCopy="Hello World :)" ButtonText="Copy Hello World :)" />
<CopyButton TextToCopy="Hello World Just Icon :)" IsJustIcon="true" />

<EventConsole @ref=@console />

<RadzenRow>
    <RadzenColumn Width="12">
        <RadzenButton Text="Show Modal" Click="@ShowModal" />
    </RadzenColumn>
</RadzenRow>


@code {
    private bool IsModalVisible = false;
    public string text { get; set; } = string.Empty;
    public string text1 { get; set; } = "Third Column";
    public AntennaType Antenna { get; set; } = AntennaType.Internal;
    public LoRaWANBand LRWBand { get; set; } = LoRaWANBand.EU868;
    public LoRaWANMode LRWMode { get; set; } = LoRaWANMode.ABP;
    public LoRaWANNetwork LRWNetwork { get; set; } = LoRaWANNetwork.Public;
    public LoRaWANClass LRWClass { get; set; } = LoRaWANClass.A;
    public string DevEUI { get; set; } = "1234567890ABCDEF";
    public string AppKey { get; set; } = "1234567890ABCDEF1234567890ABCDEF";
    public string JoinEUI { get; set; } = "1234567890ABCDEF";
    public string DevAddr { get; set; } = "12345678";
    public string AppSKey { get; set; } = "1234567890ABCDEF1234567890ABCDEF";
    public string NwkSKey { get; set; } = "1234567890ABCDEF1234567890ABCDEF";

    public LTEAuthType LTEAuthorization { get; set; } = LTEAuthType.None;
    public string LTEAPN { get; set; } = "hardwario";
    public string LTEUsername { get; set; } = "username";
    public string LTEPassword { get; set; } = "password";

    public LoRaWANConfigCompleteForm? LRWConfigRef;
    public LoRaWANConfig LRWConfig { get; set; } = new LoRaWANConfig();

    public LTEConfigCompleteForm? LTEConfigRef;
    public LTEConfig LTEConfigData { get; set; } = new LTEConfig();

    private List<string> consoleOutput = new List<string>();

    public hio_dotnet.UI.BlazorComponents.Radzen.CHESTER.SearchForChesters? sfcRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await sfcRef?.LoadChesters(new List<string> { "Chester1", "Chester2", "Chester3" });
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    EventConsole console;
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        //console.Log($"{message.Severity} notification");
    }

    private void OnAntennaChangedHandler(AntennaType antenna)
    {
        Antenna = antenna;
        ShowNotification(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Success, 
                Summary = "Antenna Type Changed", 
                Detail = $"New set type of antenna is: {antenna}", 
                Duration = 4000 
            });

        console.Log($"Antenna changed to {antenna}");
    }

    private void OnLoRaWANBandChangedHandler(LoRaWANBand band)
    {
        LRWBand = band;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "LoRaWAN Band Type Changed",
                Detail = $"New set type of Band is: {band}",
                Duration = 4000
            });

        console.Log($"LoRaWAN BAnd changed to {band}");
    }

    private void OnLoRaWANModeChangedHandler(LoRaWANMode mode)
    {
        LRWMode = mode;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "LoRaWAN Mode Type Changed",
                Detail = $"New set type of Mode is: {mode}",
                Duration = 4000
            });

        console.Log($"LoRaWAN Mode changed to {mode}");
    }

    private void OnLoRaWANNetworkChangedHandler(LoRaWANNetwork network)
    {
        LRWNetwork = network;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "LoRaWAN Network Type Changed",
                Detail = $"New set type of Network is: {network}",
                Duration = 4000
            });

        console.Log($"LoRaWAN Network changed to {network}");
    }

    private void OnLoRaWANClassChangedHandler(LoRaWANClass loraClass)
    {
        LRWClass = loraClass;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "LoRaWAN Class Type Changed",
                Detail = $"New set type of Class is: {loraClass}",
                Duration = 4000
            });

        console.Log($"LoRaWAN Class changed to {loraClass}");
    } 
    
    private void OnDevEUIChangedHandler(string devEUI)
    {
        DevEUI = devEUI;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "DevEUI Changed",
                Detail = $"New set DevEUI is: {devEUI}",
                Duration = 4000
            });

        console.Log($"DevEUI changed to {devEUI}");
    }

    private void OnAppKeyChangedHandler(string appKey)
    {
        AppKey = appKey;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "AppKey Changed",
                Detail = $"New set AppKey is: {appKey}",
                Duration = 4000
            });

        console.Log($"AppKey changed to {appKey}");
    }

    private void OnJoinEUIChangedHandler(string joinEUI)
    {
        JoinEUI = joinEUI;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "JoinEUI Changed",
                Detail = $"New set JoinEUI is: {joinEUI}",
                Duration = 4000
            });

        console.Log($"JoinEUI changed to {joinEUI}");
    }

    private void OnDevAddrChangedHandler(string devAddr)
    {
        DevAddr = devAddr;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "DevAddr Changed",
                Detail = $"New set DevAddr is: {devAddr}",
                Duration = 4000
            });

        console.Log($"DevAddr changed to {devAddr}");
    }

    private void OnAppSKeyChangedHandler(string appSKey)
    {
        AppSKey = appSKey;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "AppSKey Changed",
                Detail = $"New set AppSKey is: {appSKey}",
                Duration = 4000
            });

        console.Log($"AppSKey changed to {appSKey}");
    }

    private void OnNwkSKeyChangedHandler(string nwkSKey)
    {
        NwkSKey = nwkSKey;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "NwkSKey Changed",
                Detail = $"New set NwkSKey is: {nwkSKey}",
                Duration = 4000
            });

        console.Log($"NwkSKey changed to {nwkSKey}");
    }

    private void OnLTEAuthChangedHandler(LTEAuthType lteauth)
    {
        LTEAuthorization = lteauth;
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "LTE Authorization type  Changed",
                Detail = $"New set type of LTE Authorization is: {lteauth}",
                Duration = 4000
            });

        console.Log($"LTE Authorization type changed to {lteauth}");
    }

    public void ShowModal()
    {
        IsModalVisible = true;
    }

    public void CloseModal()
    {
        IsModalVisible = false;
    }

    public void OKModal()
    {
        IsModalVisible = false;
        text1 = text;
    }

    private async Task HandleSendCommand(string command)
    {
        if (LRWConfigRef != null)
        {
            LRWConfig = LRWConfigRef.GetConfig();
            Console.WriteLine($"LoRaWAN Complete>>>>{LRWConfig.DevAddr}");
        }

        if (LTEConfigRef != null)
        {
            LTEConfigData = LTEConfigRef.GetConfig();
            Console.WriteLine($"LoRaWAN Complete>>>>{LTEConfigData.Apn}");
        }


        consoleOutput.Add("> " + command);
        if (command.Trim().ToLower() == "config show")
        {
            await Task.Delay(100);

            var config = new LoRaWANConfig()
                .WithDevAddr(DevAddr)
                .WithDevEui(DevEUI)
                .WithJoinEui(JoinEUI)
                .WithAppKey(AppKey)
                .WithAppSKey(AppSKey)
                .WithNwkSKey(NwkSKey)
                .WithAntenna(Antenna)
                .WithBand(LRWBand)
                .WithMode(LRWMode)
                .WithNetwork(LRWNetwork)
                .WithClass(LRWClass)
                .WithDutyCycle(true)
                .WithTest(true)
                .WithAdr(true)
                .WithDataRate(3);

            var cfg = config.GetWholeConfig();

            var lteconfig = new LTEConfig()
                        .WithApn(LTEAPN)
                        .WithUsername(LTEUsername)
                        .WithPassword(LTEPassword)
                        .WithAuth(LTEAuthorization)
                        .WithTest(true);   

            var ltecfg = lteconfig.GetWholeConfig();

            // add each line of built cfg to consoleOutput
            foreach (var line in cfg.Split("\n"))
            {
                consoleOutput.Add(line);
            }

            foreach (var line in ltecfg.Split("\n"))
            {
                consoleOutput.Add(line);
            }
        }
    }
}