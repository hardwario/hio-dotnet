@inherits LayoutComponentBase

@inject TooltipService TooltipService
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime

<RadzenLayout>
    <RadzenHeader>
        <RadzenRow>
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" JustifyContent="JustifyContent.Start">
                    <RadzenSidebarToggle Click="@sidebarToggle" Style="margin-left:4px;" />
                    <img src="resources/hw_logo_pos.svg" alt="HARDWARIO" style="width:100px;height:100%;" />
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                    <RadzenButton 
                    Icon="@(isDark ? "dark_mode" : "light_mode")" 
                    Style="background: none; border: none; cursor: pointer;" 
                    Click="@ToggleTheme" 
                    Size="ButtonSize.Small"
                    Title="Toggle theme"
                    />

                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" Style="width: max-content;height:100%;">
        <RadzenStack Orientation="Orientation.Vertical" Style="height:100%;">
            <RadzenRow>
                <RadzenColumn Style="height:100%;">
                    <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
                        <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions() { Text = "Home", Position = TooltipPosition.Right }) )" />
                        <RadzenPanelMenuItem Text="Graph" Icon="monitoring" Path="/graph" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions() { Text = "Counter", Position = TooltipPosition.Right }) )" />
                        <RadzenPanelMenuItem Text="Configs" Icon="manufacturing" Path="/configs" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions() { Text = "Configs", Position = TooltipPosition.Right }) )" />
                        <RadzenPanelMenuItem Text="Cloud" Icon="cloud" Path="/hiocloud" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions() { Text = "Cloud", Position = TooltipPosition.Right }) )" />
                    </RadzenPanelMenu>
                </RadzenColumn>
            </RadzenRow>
            @if (sidebarExpanded)
            {
                <RadzenRow Style="height:100%;">
                    <RadzenColumn Style="height:100%;">
                        <RadzenStack Style="height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Center">
                            <RadzenText Text="@GetVersion()" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            }
        </RadzenStack>
    </RadzenSidebar>
    <RadzenBody Style="padding:0px;">
        @Body
    </RadzenBody>
    <RadzenFooter>
        <Footer @ref=footerRef />
    </RadzenFooter>
</RadzenLayout>

<RadzenComponents />

@code {
    bool sidebarExpanded = true;
    Footer? footerRef;

    bool isDark = true;

    protected override void OnInitialized()
    {
        ThemeService.SetTheme("material-dark");
    }

    protected override async Task OnParametersSetAsync()
    {
        await JSRuntime.InvokeVoidAsync("toggleThemeStyleSheet", isDark);
    }

    private async Task ToggleTheme()
    {
        isDark = !isDark;
        var newTheme = isDark ? "material-dark" : "material";
        ThemeService.SetTheme(newTheme);
        await JSRuntime.InvokeVoidAsync("toggleThemeStyleSheet", isDark);
        StateHasChanged();
    }

    public string GetVersion()
    {
        return $"Version: {MainDataContext.Config.AppVersion}";
    }

    private async Task sidebarToggle()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null)
    {
        if (!sidebarExpanded)
        {
            TooltipService.Open(elementReference, options.Text, options);
        }
    }
}