@page "/"
@using Shiny.BluetoothLE
@using Shiny
@using hio_dotnet.PhoneDrivers.BLE

@inject ChesterBLEService BleService

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
    <SearchForChesters @ref=searchForChesterRef OnStartSearch="onStartSearchHandler" OnConnectToChester="onConnectToChesterHandler" />

    @if (IsConnected && BleService.ConnectedPeripheral != null)
    {
        <RadzenText TextStyle="TextStyle.Body1">Is Connected to @BleService.ConnectedPeripheral.Name</RadzenText>
        <RadzenButton Text="Get CHESTER Info" ButtonStyle="ButtonStyle.Primary" Click="() => GetChesterDescriptionData()" />
        <hr />

        @if (BleService.ConnectedDevice != null)
        {
            <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
                <RadzenText Text="@($"Vendor Name: {BleService.ConnectedDevice.VendorName}")" />
                <RadzenText Text="@($"Device Name: {BleService.ConnectedDevice.ProductName}")" />
                <RadzenText Text="@($"Serial Number: {BleService.ConnectedDevice.SerialNumber}")" />
                <RadzenText Text="@($"Hardware variant: {BleService.ConnectedDevice.HardwareVariant}")" />
                <RadzenText Text="@($"Hardware Revision: {BleService.ConnectedDevice.HardwareRevision}")" />
                <RadzenText Text="@($"Firmware Name: {BleService.ConnectedDevice.FirmwareName}")" />
                <RadzenText Text="@($"Firmware Version: {BleService.ConnectedDevice.FirmwareVersion}")" />
                <RadzenText Text="@($"Claim Token: {BleService.ConnectedDevice.ClaimToken}")" />
                <RadzenText Text="@($"Bluetooth Address: {BleService.ConnectedDevice.BluetoothAddress}")" />
                <RadzenText Text="@($"Bluetooth Key: {BleService.ConnectedDevice.BluetoothKey}")" />
            </RadzenStack>
        }
    }
    else
    {
        <RadzenText Text="Chester is not connected yet" />
    }
</RadzenStack>

@code {
    private SearchForChesters searchForChesterRef;

    public bool IsConnected { get => BleService.IsConnected; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (BleService != null && BleService.PeripherialsDict != null &&
            BleService.PeripherialsDict.Count() > 0 && searchForChesterRef != null)
            searchForChesterRef?.LoadChesters(BleService.PeripherialsDict.Keys.ToList());

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task onStartSearchHandler()
    {
        BleService.PeripherialsDictChanged += refresh;
        BleService.Connected += connected;
        BleService.DeviceDetialsLoaded += devicedetailsloaded;
        await BleService.ScanForDevices();
    }

    private void refresh(object sender, EventArgs e)
    {
        StateHasChanged();
        searchForChesterRef?.LoadChesters(BleService.PeripherialsDict.Keys.ToList());
    }

    private void connected(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void devicedetailsloaded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task onConnectToChesterHandler(string chester)
    {
        if (!BleService.PeripherialsDict.ContainsKey(chester))
            return;
        var per = BleService.PeripherialsDict[chester];
        await ConnectToDevice(per);
    }

    private async Task ConnectToDevice(IPeripheral per)
    {
        await BleService.ConnectToDevice(per);
    }

    private async Task GetChesterDescriptionData()
    {
        if (BleService.ConnectedPeripheral != null)
            await BleService.GetChesterDescriptionData(BleService.ConnectedPeripheral);
    }
}
