@page "/"
@using Shiny.BluetoothLE;
@using Shiny;
@using hio_dotnet.PhoneDrivers.BLE;

@inject ChesterBLEService BleService

<SearchForChesters @ref=searchForChesterRef OnStartSearch="onStartSearchHandler" OnConnectToChester="onConnectToChesterHandler"/>

@if (IsConnected && peripheral != null)
{
    <Span>Is Connected to @peripheral.Name</Span>
    <Button Color="Color.Primary" Clicked="() => GetChesterDescriptionData()">Get CHESTER Info</Button>
    <Divider />

    @if (BleService.ConnectedDevice != null)
    {
        <Row>
            <Column>
                <Row>
                    <Column>Vendor Name: @BleService.ConnectedDevice.VendorName</Column>
                </Row>
                <Row>
                    <Column>Device Name: @BleService.ConnectedDevice.ProductName</Column>
                </Row>
                <Row>
                    <Column>Serial Number: @BleService.ConnectedDevice.SerialNumber</Column>
                </Row>
                <Row>
                    <Column>Hardware variant: @BleService.ConnectedDevice.HardwareVariant</Column>
                </Row>
                <Row>
                    <Column>Hardware Revision: @BleService.ConnectedDevice.HardwareRevision</Column>
                </Row>
                <Row>
                    <Column>Fimware Name: @BleService.ConnectedDevice.FirmwareName</Column>
                </Row>
                <Row>
                    <Column>Firmware Version: @BleService.ConnectedDevice.FirmwareVersion</Column>
                </Row>
                <Row>
                    <Column>Claim Token: @BleService.ConnectedDevice.ClaimToken</Column>
                </Row>
                <Row>
                    <Column>Bluetooth Address: @BleService.ConnectedDevice.BluetoothAddress</Column>
                </Row>
                <Row>
                    <Column>Bluetooth Key: @BleService.ConnectedDevice.BluetoothKey</Column>
                </Row>
            </Column>
        </Row>
    }
}
else
{
    <Span>Chester is not connected yet</Span>
}

@code {
    private bool IsConnected = false;
    IPeripheral peripheral = null;
    private SearchForChesters searchForChesterRef;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (BleService != null && BleService.PeripherialsDict != null &&
            BleService.PeripherialsDict.Count() > 0 && searchForChesterRef != null)
            searchForChesterRef?.LoadChesters(BleService.PeripherialsDict.Keys.ToList());

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task onStartSearchHandler()
    {
        BleService.PeripherialsDictChanged += refresh;
        BleService.Connected += connected;
        BleService.DeviceDetialsLoaded += devicedetailsloaded;
        await BleService.ScanForDevices();
    }

    private void refresh(object sender, EventArgs e)
    {
        StateHasChanged();
        searchForChesterRef?.LoadChesters(BleService.PeripherialsDict.Keys.ToList());
    }

    private void connected(object sender, EventArgs e)
    {
        IsConnected = true;
        StateHasChanged();
    }

    private void devicedetailsloaded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task onConnectToChesterHandler(string chester)
    {
        if (!BleService.PeripherialsDict.ContainsKey(chester))
            return;
        var per = BleService.PeripherialsDict[chester];
        await ConnectToDevice(per);
    }

    private async Task ConnectToDevice(IPeripheral per)
    {
        peripheral = per;
        await BleService.ConnectToDevice(per);
    }

    private async Task GetChesterDescriptionData()
    {
        await BleService.GetChesterDescriptionData(peripheral);
    }
}
