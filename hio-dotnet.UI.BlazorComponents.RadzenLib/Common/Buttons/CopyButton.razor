@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

@if (!copyTextButtonCoppied)
{
    @if (!IsJustIcon)
    {
        <RadzenButton @onclick="copyCodeToClipboard" Style="@Style" class="copy-button">@ButtonText</RadzenButton>
    }
    else
    {
        <RadzenButton @onclick="copyCodeToClipboard" class="copy-button"><RadzenIcon Icon="content_copy" /></RadzenButton>
    }
}
else
{
    @if (!IsJustIcon)
    {
        <RadzenButton Style="@Style" class="copy-button">Copied <RadzenIcon Icon="check" /></RadzenButton>
    }
    else
    {
        <RadzenButton class="copy-button"><RadzenIcon Icon="check" /></RadzenButton>
    }
}

<style>
    .rz-button.rz-primary.copy-button {
        background: none;
        border: none;
        cursor: pointer;
        color: white;
        transition: color 0.3s;
        margin-left: 8px;
    }

    .copy-button:hover {
        color: gray;
    }
</style>

@code {
    [Parameter] public bool IsJustIcon { get; set; } = false;
    [Parameter] public string Style { get; set; } = string.Empty;

    [Parameter]
    public string TextToCopy
    {
        get => textToCopy;
        set => textToCopy = value;
    }
    [Parameter]
    public string ButtonText { get; set; } = "Copy";

    private string textToCopy = string.Empty;
    private bool copyTextButtonCoppied = false;

    private async Task copyCodeToClipboard(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(textToCopy))
            return;

        await JSRuntime.InvokeVoidAsync("hiodotnet.copyToClipboard", textToCopy);
        await copyCodeToClipboardButtonTextEfect();
    }

    private async Task copyCodeToClipboardButtonTextEfect()
    {
        copyTextButtonCoppied = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000);
        copyTextButtonCoppied = false;
        await InvokeAsync(StateHasChanged);
    }
}