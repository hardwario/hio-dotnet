<Heading Size="HeadingSize.Is4">Search for Chesters</Heading>
<Divider />

<Row>
    <Column>
        <Row>
            <Column>
                <Button Color="Color.Primary" Clicked="() => OnStartSearch.InvokeAsync()">Search</Button>
            </Column>
        </Row>
    </Column>
</Row>
@if (Chesters.Count > 0)
{
    <Row>
        <Column>
            <Heading Size="HeadingSize.Is5">Chesters</Heading>
            <Divider />
            <Row>
                <Column>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell>Action</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var chester in Chesters)
                            {
                                <TableRow>
                                   <TableRowCell>@chester</TableRowCell>
                                    <TableRowCell>
                                        <Button Color="Color.Primary" Clicked="() => OnConnectToChester.InvokeAsync(chester)">Connect</Button>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </Column>
            </Row>
        </Column>
    </Row>
}
@code {
    [Parameter] public EventCallback<string> OnStartSearch { get; set; }
    [Parameter] public EventCallback<string> OnConnectToChester { get; set; }
    private List<string> Chesters { get; set; } = new List<string>();

    public async Task LoadChesters(List<string> chesters)
    {
        Chesters = chesters;
        await InvokeAsync(StateHasChanged);
    }
}
