@using Services
@using hio_dotnet.APIs.ThingsBoard.Models
@using hio_dotnet.UI.BlazorComponents.RadzenLib.ThingsBoard.Models

@inject ThingsBoardService ThingsBoardService

<RadzenRow>
    <RadzenColumn>
        <RadzenText Text="Device Name:" />
        <RadzenText Text="@DeviceData.Name" />
    </RadzenColumn>
</RadzenRow>

<RadzenRow Style="margin-top:1rem">
    <RadzenColumn>
        <RadzenText Text="Device Id:" />
        <RadzenText Text="@DeviceData.Id.Id.ToString()" />
    </RadzenColumn>
</RadzenRow>


<RadzenRow Style="margin-top:2rem">
    <RadzenColumn>
        <RadzenText Text="Data Keys" />
    </RadzenColumn>
</RadzenRow>

<RadzenRow Style="margin-top:1rem">
    <RadzenColumn>
            @foreach (var key in keys)
            {
                <RadzenLabel Component="@key.Key" Text="@key.Key" />
                <RadzenCheckBox Name="@key.Key" @bind-Value="@key.Checked" Style="margin-right:2rem;"/>
            }
    </RadzenColumn>
</RadzenRow>

<RadzenRow Style="margin-top:1.5rem">
    <RadzenColumn>
        <RadzenButton Text="Get Latest Data" Click="@onGetLatestDataHandler" />
    </RadzenColumn>
</RadzenRow>

<RadzenRow>
    <RadzenColumn>
        <hio_dotnet.UI.BlazorComponents.RadzenLib.Common.JSON.JSONViewer @ref="JSONViewerRef" />
    </RadzenColumn>
</RadzenRow>


@code {
    class KeyToCheck
    {
        public string Key { get; set; }
        public bool Checked { get; set; }
    }

    [Parameter] public OpenedTab Tab { get; set; }

    private hio_dotnet.UI.BlazorComponents.RadzenLib.Common.JSON.JSONViewer JSONViewerRef;

    private List<KeyToCheck> keys = new List<KeyToCheck>();

    private string data = string.Empty;

    public Device DeviceData
    { 
        get 
        { 
            var d = Tab.Data as Device;
            if (d == null)
            {
                d = new Device();
            }
            return d;
        } 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadKeys();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task loadKeys()
    {
        if (ThingsBoardService.DevicesDataKeys.ContainsKey(DeviceData.Id.Id))
        {
            keys.Clear();
            foreach (var key in ThingsBoardService.DevicesDataKeys[DeviceData.Id.Id])
            {
                keys.Add(new KeyToCheck() { Key = key, Checked = false });
            }
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            var res = await ThingsBoardService.GetDeviceKeys(DeviceData.Id.Id);
            if (res)
            {
                if (ThingsBoardService.DevicesDataKeys.TryGetValue(DeviceData.Id.Id, out var ks))
                {
                    keys.Clear();
                    foreach (var key in ks)
                    {
                        keys.Add(new KeyToCheck() { Key = key, Checked = false });
                    }
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task onGetLatestDataHandler()
    {
        var keysToCheck = keys.Where(k => k.Checked).Select(k => k.Key).ToList();
        var keysString = string.Join(",", keysToCheck);
        data = await ThingsBoardService.GetLatestData(DeviceData.Id.Id, keysString);

        if (JSONViewerRef != null)
        {
            await JSONViewerRef.Load(data);
        }
    }
}
