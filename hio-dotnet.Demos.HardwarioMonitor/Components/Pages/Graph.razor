@using Services

@page "/graph"

@inject ConsoleService ConsoleService
@inject LoadingOverlayService LoadingOverlayService

<LoadingOverlay />

<RadzenLayout Style="height: 100%; grid-template-rows: 1fr; grid-template-columns: 1fr auto; grid-template-areas: 'rz-body rz-sidebar'">
    <RadzenSidebar Style="padding: 15px;">
        <div style="margin-top: 16px; margin-bottom: 32px;">
            <div style="display: flex;
                    align-items:center;
                    column-gap: 8px">

                <RadzenNumeric ShowUpDown="false" class="voltage-input" @bind-Value=Voltage Min="3300" Max="4000"></RadzenNumeric>
                <RadzenButton Click="SetPPK2Voltage" class="set-voltage-button">SET</RadzenButton>
            </div>
            <div style="display: flex;
                    align-items: center;
                    justify-content: space-between;
                    margin-top: 16px">
                <label>
                    TURN VOLTAGE ON/OFF
                </label>
                <RadzenSwitch @bind-Value="@ConsoleService.IsDeviceOn" Change="@SwitchPPK2" />
            </div>
        </div>
        <div class="sidebar-section">
            <h5 class="sidebar-heading">
                Initialization
            </h5>
            @if (!ConsoleService.IsPPK2Connected)
            {
                <RadzenButton Click="OnInitPPK2Handler" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
            }
            else
            {
                <RadzenButton Click="OnInitPPK2Handler" Disabled="true" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
            }
        </div>

        <div class="sidebar-section">
            <h5 class="sidebar-heading">
                Others
            </h5>
            @if (!ConsoleService.IsDeviceOn)
            {
                <RadzenButton Click="StartPPK2WithGraph" Style="margin-top: 5px; width: 100%;">Turn On With Graph</RadzenButton>
            }
            else
            {
                <RadzenButton Click="StopPPK2" Style="margin-top: 5px; width: 100%;">Turn Off</RadzenButton>
            }
        </div>
    </RadzenSidebar>
    <RadzenBody>
        <div class="card-container">
            <div class="card-heading">
                <h4>Graph</h4>
            </div>
            <div>
                <RadzenChart @ref=radzenChartRef>
                    <RadzenChartTooltipOptions Shared="@sharedTooltip" />
                    <RadzenLineSeries Smooth="@smooth" Data="@ConsoleService.dataPoints" CategoryProperty="Time" Title="Current" LineType="LineType.Solid" ValueProperty="Current">
                        <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" />
                    <RadzenValueAxis Formatter="@FormatAsString">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="MircroAmpers" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </RadzenBody>
</RadzenLayout>


@code {
    private bool isBusy = false;

    bool smooth = false;
    bool sharedTooltip = false;
    bool showDataLabels = false;
    bool showMarkers = true;
    RadzenChart? radzenChartRef;

    public int Voltage { get; set; } = 3300;

    protected override void OnInitialized()
    {
        ConsoleService.InitArrays();
        ConsoleService.DataPointsReceived += DataPointsReceived;
        ConsoleService.OnIsBusy += (s, e) =>
        {
            isBusy = e;
            LoadingOverlayService.ShowIfBusy(isBusy);
        };
    }

    string FormatAsString(object value)
    {
        return ((double)value).ToString();
    }

    public void DataPointsReceived(object sender, DataPoint[] data)
    {
        if (radzenChartRef != null)
        {
            InvokeAsync(radzenChartRef.Reload);
        }

    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }


    public async Task OnInitPPK2Handler()
    {
        await ConsoleService.FindAndConnectPPK();
    }

    public async Task SetPPK2Voltage()
    {
        await ConsoleService.SetPPK2Voltage(Voltage);
    }

    public async Task StartPPK2()
    {
        await ConsoleService.TurnOnPower();
    }

    public async Task StartPPK2WithGraph()
    {
        await ConsoleService.TurnOnPower(true);
    }

    public async Task StopPPK2()
    {
        await ConsoleService.TurnOffPower();
    }

    public async Task SwitchPPK2(bool turnPPKOn)
    {
        if (turnPPKOn)
        {
            await ConsoleService.TurnOnPower();
        }
        else
        {
            await ConsoleService.TurnOffPower();
        }
    }
}
