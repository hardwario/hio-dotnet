using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace hio_dotnet.Common.Models.DataSimulation
{
    public interface IContinuousSimulator<T> where T : class
    {
        /// <summary>
        /// Unique identifier of the simulator
        /// </summary>
        Guid Id { get; set; }
        /// <summary>
        /// Identify if the simulator is running
        /// </summary>
        bool IsRunning { get; }
        /// <summary>
        /// Name of the simulator
        /// </summary>
        string Name { get; set; }
        /// <summary>
        /// Description of the simulator
        /// </summary>
        string Description { get; set; }
        /// <summary>
        /// The Id of simulated device in some external software where the message should go to
        /// </summary>
        string? ExternalSoftwareId { get; set; }
        /// <summary>
        /// The Access Token of simulated device in some external software where the message should go to
        /// </summary>
        string? ExternalSoftwareAccessToken { get; set; }
        /// <summary>
        /// Number of messages generated by the simulator so far
        /// </summary>
        int MessagesCount { get; }
        /// <summary>
        /// Interval between messages in milliseconds
        /// </summary>
        long Interval { get; set; }
        /// <summary>
        /// Latest generated message
        /// </summary>
        SimulatedMessage<T>? LastMessage { get; set; }
        /// <summary>
        /// Event raised when a new message is generated
        /// </summary>

        event EventHandler<ContinuousSimulatorEventArgs<T>> OnDataGenerated;
        /// <summary>
        /// Load the initial message of the simulator
        /// This can be helpful to renew the simulator message from file or database
        /// </summary>
        void LoadInitMessage(string message);
        /// <summary>
        /// Function to get the last message generated by the simulator
        /// This can be helpful to save the latest stage of the simulator message for later reload from file or database
        /// </summary>
        SimulatedMessage<T>? GetLastMessage();
        /// <summary>
        /// Start Simulator main loop
        /// </summary>
        Task Start();
        /// <summary>
        /// Stop Simulator main loop
        /// </summary>
        void Stop();
        /// <summary>
        /// Set the interval between messages
        /// </summary>
        /// <param name="interval"></param>
        void SetInterval(long interval);
    }
}
