@using hio_dotnet.UI.BlazorComponents.Basics.Frames
@using hio_dotnet.UI.BlazorComponents.Basics.Buttons
@using hio_dotnet.UI.BlazorComponents.Basics.Tables
@using hio_dotnet.UI.BlazorComponents.Basics

<Row>
    <Column>
        <Row>
            <Column>
                <Button Variant="Color.Primary" OnClick="() => OnStartSearch.InvokeAsync()">Search</Button>
            </Column>
        </Row>
    </Column>
</Row>

@if (Chesters.Count > 0)
{
    <Row Width="RowWidth.Full">
        <Column CWidth="ColumnWidth.Twelve" WidthPercentage="ColumnWidthPercentage.Full">
            <h5>Chesters</h5>
            <hr />

            <Row Width="RowWidth.Full">
                <Column CWidth="ColumnWidth.Twelve" WidthPercentage="ColumnWidthPercentage.Full">

                    <Table Width="TableWidth.Full" Variant="TableVariant.Striped">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderColumn>Name</TableHeaderColumn>
                                <TableHeaderColumn>Action</TableHeaderColumn>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var chester in Chesters)
                            {
                                <TableRow>
                                    <TableBodyColumn>@chester</TableBodyColumn>
                                    <TableBodyColumn>
                                        <Button Variant="Color.Primary" OnClick="() => OnConnectToChester.InvokeAsync(chester)">Connect</Button>
                                    </TableBodyColumn>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </Column>
            </Row>
        </Column>
    </Row>
}

@code {
    [Parameter] public EventCallback<string> OnStartSearch { get; set; }
    [Parameter] public EventCallback<string> OnConnectToChester { get; set; }
    private List<string> Chesters { get; set; } = new List<string>();

    public async Task LoadChesters(List<string> chesters)
    {
        Chesters = chesters;
        await InvokeAsync(StateHasChanged);
    }
}
