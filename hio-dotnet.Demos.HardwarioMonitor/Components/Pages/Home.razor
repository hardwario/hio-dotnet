@using Services
@using hio_dotnet.UI.BlazorComponents.RadzenLib.Common.Models
@using hio_dotnet.UI.BlazorComponents.RadzenLib.CHESTER.Models
@page "/"

@inject ConsoleService ConsoleService
@inject LoadingOverlayService LoadingOverlayService
@inject DialogService DialogService
@inject AutomatedCommandsService AutomatedCommandsService
@inject ThemeService ThemeService

<LoadingOverlay />

<RadzenLayout Style="height: 100%; grid-template-rows: 1fr; grid-template-columns: 1fr auto; grid-template-areas: 'rz-body rz-sidebar'">
    <RadzenSidebar Style="padding: 15px;">

        <DeviceSelector OnDeviceSelected="OnDeviceSelectedHandler" />

        <div style="margin-top: 16px; margin-bottom: 32px;">
            <div style="display: flex;
                    align-items:center;
                    column-gap: 8px">

                <RadzenNumeric ShowUpDown="false" class="voltage-input" @bind-Value=Voltage Min="3300" Max="4000"></RadzenNumeric>
                <RadzenButton Click="SetPPK2Voltage" class="set-voltage-button">SET</RadzenButton>
            </div>
            <div style="display: flex;
                    align-items: center;
                    justify-content: space-between;
                    margin-top: 16px">
                <label>
                    TURN VOLTAGE ON/OFF
                </label>
                <RadzenSwitch @bind-Value="@ConsoleService.IsDeviceOn" Change="@SwitchPPK2" />
            </div>
        </div>

        <div class="sidebar-section">
            <h5 class="sidebar-heading">
                Initialization
            </h5>
            @if (!ConsoleService.IsPPK2Connected)
            {
                <RadzenButton Click="OnInitPPK2Handler" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
            }
            else
            {
                <RadzenButton Click="OnInitPPK2Handler" Disabled="true" Style="margin-top: 5px; width: 100%; background-color: antiquewhite;">Init PPK2</RadzenButton>
            }
            @if (!ConsoleService.IsConsoleListening)
            {
                <RadzenButton Click="OnInitConsoleHandler" Style="margin-top: 5px; width: 100%;">Init Console</RadzenButton>
                <RadzenButton Click="OnInitConsoleJustJLinkHandler" Style="margin-top: 5px; width: 100%;">Init JLink Only</RadzenButton>
            }
            else
            {
                <RadzenButton Click="StopListening" Style="margin-top: 5px; width: 100%;">Stop Listening</RadzenButton>
            }
        </div>

        <div class="sidebar-section">
            <h5 class="sidebar-heading">
                Session
            </h5>
            <CreateRemoteSession SessionId="@ConsoleService.RemoteSessionId" Style="margin-top: 5px; width:100%;" OnCreateRemoteSession="@OnCreateRemoteSessionHanlder" OnCancelRemoteSession="@OnCancelRemoteSessionHanlder" />
            <ConnectToRemoteSession SessionId="@ConsoleService.RemoteSessionId" Style="margin-top: 5px; width:100%;" OnConnectToRemoteSession="@OnConnectToRemoteSessionHanlder" OnCancelRemoteSession="@OnCancelRemoteSessionHanlder" />
        </div>

        <div class="sidebar-section">
            <h5 class="sidebar-heading">
                Other
            </h5>
            @if (ConsoleService.IsConsoleListening)
            {
                <RadzenButton Click="LoadCommandsFromDevice" Style="margin-top: 5px; width: 100%;">Load Commands From Device</RadzenButton>
            }
            <RadzenButton Click="OpenAutomatedCommandsWindow" Style="margin-top: 5px; width: 100%;">Automated Commands</RadzenButton>

            <RadzenButton Click="LoadFirmware" Style="margin-top: 5px; width: 100%;">Load Firmware</RadzenButton>
        </div>
    </RadzenSidebar>
    <RadzenBody Style="padding: 0px 8px 0px 8px; height: 100%;">
        <RadzenRow Style="height: 100%;">
            <RadzenColumn Style="height: 100%;">
                <RadzenRow Style="height: 100%;">
                    <RadzenColumn Style="height: 100%;">
                        <RadzenSplitter Orientation="Orientation.Vertical" style="height: 100%; border: 1px solid rgba(0,0,0,.08);">
                            <RadzenSplitterPane Size="100px">
                                <RadzenSplitter>
                                    <RadzenSplitterPane Size="50%" Min="30px" Max="70%">
                                        <ConsoleComponent @ref=consoleComponentRef
                                        Output="@ConsoleService.ConsoleOutputShell"
                                        Hints="@Hints"
                                        Theme=@ThemeService.Theme
                                        IsSendButtonDisabled="@isDisabled"
                                        OnAutoScrollChange="HandleConsoleScrollChange"
                                        OnSendCommand="HandleSendCommand"
                                        OnSaveLogToFileClicked="SaveShellToFile"
                                        IsActionPanelVisible="true"
                                        ActionCommandButtonDataList="@ActionCommandButtonDataList"
                                        OnActionSendCommandHandler="onSendCommandHandler" />
                                    </RadzenSplitterPane>
                                    <RadzenSplitterPane>
                                        <ConsoleComponent @ref=consoleComponentLogRef
                                        Headline="Log"
                                        Theme=@ThemeService.Theme
                                        OnSaveLogToFileClicked="SaveLogToFile"
                                        OnAutoScrollChange="HandleLogScrollChange"
                                        Output="@ConsoleService.ConsoleOutputLog"
                                        HideCommandLine="true" />
                                    </RadzenSplitterPane>
                                </RadzenSplitter>
                            </RadzenSplitterPane>
                        </RadzenSplitter>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>

@code {
    private bool isBusy = false;
    private bool isDisabled = false;
    private bool isLogScrollingAutomatically = true;
    private bool isShellScrollingAutomatically = true;
    private bool justAppSetting = false;

    private List<string> outputConfig = new List<string>();
    private List<string> output = new List<string>();
    ConsoleComponent? consoleComponentRef;
    ConsoleComponent? consoleComponentLogRef;

    public int Voltage { get; set; } = 3600;

    private List<string> Hints = new List<string>();

    public List<ActionCommandButtonData> ActionCommandButtonDataList { get; set; } = new List<ActionCommandButtonData>()
        {
        new ActionCommandButtonData
        {
            ButtonText = "Config Show",
            Commands = new List<string>{ "config show" },
            IsWithDialog = false,
            PositionX = 0,
            PositionY = 0,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Info Show",
            Commands = new List<string>{ "info show" },
            IsWithDialog = false,
            PositionX = 1,
            PositionY = 0,
        },
        new ActionCommandButtonData
        {
            ButtonText = "LTE Params",
            Commands = new List<string>{
                "lte imsi",
                "lte iccid",
                "lte imei",
                "lte fw-version"
            },
            IsWithDialog = false,
            PositionX = 2,
            PositionY = 0,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Config Save",
            Commands = new List<string>{ "config save" },
            IsWithDialog = true,
            DialogTitle = "Config save and reboot",
            DialogDescription = "Are you sure you want to send save config command to the MCU? It will perform reboot",
            PositionX = 0,
            PositionY = 1,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Reboot Cold",
            Commands = new List<string>{ "kernel reboot cold" },
            IsWithDialog = true,
            DialogTitle = "Cold Reboot of MCU",
            DialogDescription = "Are you sure you want to send reboot command to the MCU?",
            PositionX = 1,
            PositionY = 1,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Reboot Warm",
            Commands = new List<string>{ "kernel reboot warm" },
            IsWithDialog = true,
            DialogTitle = "Warm Reboot of MCU",
            DialogDescription = "Are you sure you want to send reboot command to the MCU?",
            PositionX = 2,
            PositionY = 1,
        }
        };


    protected override void OnInitialized()
    {
        ConsoleService.InitArrays();
        ConsoleService.NewRTTMessageLineReceived += NewLineReceived;
        ConsoleService.OnHintForConsoleRefreshed += (s, e) =>
    {
        Hints.AddRange(e.Select(h => h.Command).ToList());
        Refresh();
    };
        ConsoleService.OnIsBusy += (s, e) =>
    {
        isBusy = e;
        LoadingOverlayService.ShowIfBusy(isBusy);
        Refresh();
    };

        if (ConsoleService.IsConsoleListening || ConsoleService.RemoteSessionId != Guid.Empty)
        {
            isDisabled = false;
        }
        else
        {
            isDisabled = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ConsoleService.IsConsoleListening || ConsoleService.RemoteSessionId != Guid.Empty)
        {
            isDisabled = false;
        }
        else
        {
            isDisabled = true;
        }
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Hints.AddRange(ZephyrRTOSStandardCommands.StandardCommands.Select(c => c.Command).ToList());
            if (consoleComponentRef != null)
            {
                consoleComponentRef.MaxHeight = 66;
                consoleComponentRef.MinHeight = 66;
            }
            if (consoleComponentLogRef != null)
            {
                consoleComponentLogRef.MaxHeight = 76;
                consoleComponentLogRef.MinHeight = 76;
            }
            await Refresh();

            ConsoleService.OnIsJLinkConnected += (s, e) =>
        {
            isDisabled = false;
            InvokeAsync(StateHasChanged);
        };
            ConsoleService.OnIsJLinkDisconnected += (s, e) =>
        {
            isDisabled = true;
            InvokeAsync(StateHasChanged);
        };
        }
    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnInitConsoleJustJLinkHandler()
    {
        await ConsoleService.StartListening(false);
    }
    public async Task OnInitConsoleHandler()
    {
        await ConsoleService.StartListening();
    }

    public async Task StopListening()
    {
        await ConsoleService.StopListening();
    }

    public async Task OnInitPPK2Handler()
    {
        await ConsoleService.FindAndConnectPPK();
    }

    public async Task SetPPK2Voltage()
    {
        await ConsoleService.SetPPK2Voltage(Voltage);
    }

    public async Task SwitchPPK2(bool turnPPKOn)
    {
        if(turnPPKOn) 
        {
            await ConsoleService.TurnOnPower();
        }
        else 
        {
            await ConsoleService.TurnOffPower();
        }
    }

    public void NewLineReceived(object sender, Tuple<string, MultiRTTClientBase> data)
    {
        InvokeAsync(async () =>
    {
        await InvokeAsync(StateHasChanged);
        if (isShellScrollingAutomatically && consoleComponentRef != null)
        {
            await consoleComponentRef.Refresh();
        }
        if (isLogScrollingAutomatically && consoleComponentLogRef != null)
        {
            await consoleComponentLogRef.Refresh();
        }
    });
    }

    private void HandleLogScrollChange(bool value)
    {
        isLogScrollingAutomatically = value;
    }

    private void HandleConsoleScrollChange(bool value)
    {
        isShellScrollingAutomatically = value;
    }

    private async Task OnDeviceSelectedHandler(AvailableDevice device)
    {
        await ConsoleService.SetDevice(device);
    }

    private async Task HandleSendCommand(string command)
    {
        await ConsoleService.SendCommand(command.ToLower().Trim() + "\n");
    }

    private async Task SaveLogToFile()
    {
        await ConsoleService.SaveConsoleLogToFile();
    }

    private async Task SaveShellToFile()
    {
        await ConsoleService.SaveConsoleShellToFile();
    }

    private async Task onSendCommandHandler(List<string> commands)
    {
        foreach (var command in commands)
        {
            await ConsoleService.SendCommand(command);
        }
    }

    private async Task OnCreateRemoteSessionHanlder(Tuple<string, string> login)
    {
        if (await ConsoleService.StartRemoteSession(login.Item1, login.Item2))
        {
            isDisabled = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnCancelRemoteSessionHanlder(Guid sessionId)
    {
        if (await ConsoleService.StopRemoteWSSession())
        {
            if (!ConsoleService.IsConsoleListening)
                isDisabled = true;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnConnectToRemoteSessionHanlder(Guid sessionId)
    {
        if (await ConsoleService.ConnectToRemoteSession(sessionId))
        {
            isDisabled = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadCommandsFromDevice()
    {
        var result = await DialogService.OpenAsync("Load Commands From Device", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenRow>
            <RadzenColumn>
                <RadzenText Text="@("Are you sure you want to load commands from device? This might take a while.")" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn>
                <RadzenLabel Component="jas" Text="Load Just App Setting" />
                <RadzenCheckBox @bind-Value="justAppSetting" Name="jas" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        );

        if (result)
        {
            if (justAppSetting)
            {
                await ConsoleService.LoadCommandsFromDevice("app");
            }
            else
            {
                await ConsoleService.LoadCommandsFromDevice();
            }
        }
    }

    private async Task Execute(string command)
    {
        await ConsoleService.SendCommand(command);
    }

    private async Task OpenAutomatedCommandsWindow()
    {
        var result = await DialogService.OpenAsync("Automated Commands", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenRow>
            <RadzenColumn>
                <AutomatedCommands OnCommandExecute="@Execute" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        , new DialogOptions() { Resizable = false, Style = "width:40%;" });

    }


    private async Task LoadFirmwareExec(string hash, string filename, DialogService ds)
    {
        ds.Close(true);
        await Task.Delay(1);
        await ConsoleService.LoadFirmware(hash, filename);
    }

    private async Task LoadFirmware()
    {
        var result = await DialogService.OpenAsync("Automated Commands", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenRow>
            <RadzenColumn>
                <hio_dotnet.UI.BlazorComponents.RadzenLib.CHESTER.Firmware.FirmwareLoader OnRemoteFirmwareLoadedRequested="@(async (h) => await LoadFirmwareExec(h,"", ds))" OnLocalFirmwareLoadedRequested="@(async (f) => await LoadFirmwareExec("",f, ds))" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    , new DialogOptions() { Resizable = false, Style = "width:40%;" });

    }


}