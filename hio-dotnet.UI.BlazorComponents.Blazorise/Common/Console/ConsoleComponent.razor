
<Heading Size="HeadingSize.Is4">Console</Heading>
<Divider />

<Row Height="Height.Is100">
    <Column Height="Height.Is100">
        <Row Height="Height.Is75" Margin="Margin.Is1.FromTop.Is0.FromBottom">
            <Column Flex="Flex.Grow.Is1">
                <Card Class="console-card" Border="Border.Is1.Light" Background="Background.Dark">
                    <CardBody>
                        <Div Padding="Padding.Is1" Overflow="Overflow.Scroll">
                            @foreach (var line in Output)
                            {
                                <Div TextSize="TextSize.ExtraSmall" TextColor="TextColor.Light" Margin="Margin.Is2.FromBottom">@line</Div>
                            }
                        </Div>
                    </CardBody>
                </Card>
            </Column>
        </Row>
        <Row Height="Height.Is25" Margin="Margin.Is0.FromTop.Is2.FromBottom">
            <Column>
                <Addons>
                    <TextEdit @bind-Text="@command" Placeholder="Type command" @onkeydown="HandleKeyDown" />
                    <Addon>
                        <Button Color="Color.Primary" Clicked="SendCommand">Send</Button>
                    </Addon>
                </Addons>
            </Column>
        </Row>
    </Column>
</Row>
<style>
    .console-card {
        color: #d4d4d4;
        font-family: monospace;
    }
</style>

@code {
    [Parameter] public EventCallback<string> OnSendCommand { get; set; }
    [Parameter] public EventCallback<string> OnNewLineReceived { get; set; }
    [Parameter] public List<string> Output { get; set; } = new List<string>();

    private string command;
    private int historyIndex = -1;
    private List<string> commandHistory = new List<string>();

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendCommand();
        }
        else if (e.Key == "ArrowUp")
        {
            NavigateHistory(1);
        }
        else if (e.Key == "ArrowDown")
        {
            NavigateHistory(-1);
        }
    }

    private async Task SendCommand()
    {
        if (!string.IsNullOrEmpty(command))
        {
            commandHistory.Insert(0, command);
            historyIndex = -1;
            await OnSendCommand.InvokeAsync(command);
            command = string.Empty;
        }
    }

    private void NavigateHistory(int direction)
    {
        if (commandHistory.Count == 0) return;

        historyIndex = Math.Clamp(historyIndex + direction, -1, commandHistory.Count - 1);

        command = historyIndex >= 0 ? commandHistory[historyIndex] : string.Empty;
    }
}