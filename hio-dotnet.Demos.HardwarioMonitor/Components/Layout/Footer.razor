@using Services

@inject ConsoleService ConsoleService

<RadzenRow Style=@getLeftMargin>
    <RadzenColumn>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Left">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
                @if (ConsoleService.IsConsoleListening)
                {
                    <div style="margin-top:-2px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                            <circle cx="8" cy="8" r="7" fill="green" />
                        </svg>
                    </div>
                }
                else
                {
                    <div style="margin-top:-2px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                            <circle cx="8" cy="8" r="7" fill="red" />
                        </svg>
                    </div>
                }
                <RadzenText Text="@connectionStatus" style="margin-left:5px;" />
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
                @if (ConsoleService.IsPPK2Connected)
                {
                    <div style="margin-top:-2px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                            <circle cx="8" cy="8" r="7" fill="green" />
                        </svg>
                    </div>
                }
                else
                {
                    <div style="margin-top:-2px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                            <circle cx="8" cy="8" r="7" fill="red" />
                        </svg>
                    </div>
                }
                <RadzenText Text="@ppkconnectionStatus" style="margin-left:5px;" />
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
                @if (ConsoleService.IsDeviceOn)
                {
                    <div style="margin-top:-2px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                            <circle cx="8" cy="8" r="7" fill="green" />
                        </svg>
                    </div>
                }
                else
                {
                    <div style="margin-top:-2px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                            <circle cx="8" cy="8" r="7" fill="red" />
                        </svg>
                    </div>
                }
                <RadzenText Text="@ppkVoltageStatus" style="margin-left:5px;" />
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter] public int LeftMargin { get; set; } = 5;

    string getLeftMargin => $"margin-left:{LeftMargin}px;";
    bool sidebarExpanded = true;

    public string connectionStatus => ConsoleService.IsConsoleListening ? $"JLink Connection Status: Connected" : "JLink Connection Status: Not Connected";
    public string ppkconnectionStatus => ConsoleService.IsPPK2Connected ? $"PPK2 Connection Status: Connected" : "PPK2 Connection Status: Not Connected";
    public string ppkVoltageStatus => ConsoleService.IsDeviceOn ? $"PPK2 Voltage On: {ConsoleService.DeviceVoltage} mV " : "PPK2 Voltage Off";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ConsoleService.OnIsJLinkConnected += Refresh;
        ConsoleService.OnIsJLinkDisconnected += Refresh;
        ConsoleService.OnIsPPKConnected += Refresh;
        ConsoleService.OnIsPPKDisconnected += Refresh;
        ConsoleService.OnIsPPKVoltageOutputConnected += Refresh;
        ConsoleService.OnIsPPKVoltageOutputDisconnected += Refresh;
    }

    private void Refresh(object sender, bool e)
    {
        InvokeAsync(StateHasChanged);
    }

    public async Task ChangeLeftMargin(int margin)
    {
        LeftMargin = margin;
        await InvokeAsync(StateHasChanged);
    }
}
