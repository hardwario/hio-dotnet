@using Services

@page "/graph"

@inject ConsoleService ConsoleService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
    <!-- Loading overlay -->
    @if (isBusy)
    {
        <RadzenCard Style="z-index: 3; text-align: center; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, .5)">
            <div style="display: flex; justify-content: center; align-items: center; height: 100%; width: 100%;">
                <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                    <Template>Wait</Template>
                </RadzenProgressBarCircular>
            </div>
        </RadzenCard>
    }
</RadzenStack>

<RadzenLayout Style="height: 100%; grid-template-rows: 1fr; grid-template-columns: 1fr auto; grid-template-areas: 'rz-body rz-sidebar'">
    <RadzenSidebar Style="padding: 5px;">
        @if (!ConsoleService.IsPPK2Connected())
        {
            <RadzenButton Click="OnInitPPK2Handler" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
        }
        else
        {
            <RadzenButton Click="OnInitPPK2Handler" Disabled="true" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
        }
        <RadzenNumeric @bind-Value=Voltage Min="3300" Max="4000" Style="margin-top: 5px; width: 100%;"></RadzenNumeric>
        <RadzenButton Click="SetPPK2Voltage" Style="margin-top: 5px; width: 100%;">Set Voltage</RadzenButton>
        @if (!ConsoleService.IsDeviceOn)
        {
            <RadzenButton Click="StartPPK2" Style="margin-top: 5px; width: 100%;">Turn On</RadzenButton>
            <RadzenButton Click="StartPPK2WithGraph" Style="margin-top: 5px; width: 100%;">Turn On With Graph</RadzenButton>
        }
        else
        {
            <RadzenButton Click="StopPPK2" Style="margin-top: 5px; width: 100%;">Turn Off</RadzenButton>
        }

        <RadzenRow Style="margin-top: 5px; width: 100%;">
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal">
                    @if (ConsoleService.IsPPK2Connected())
                    {
                        <RadzenText Text="PPK Connected" />
                    }
                    else
                    {
                        <RadzenText Text="PPK Disconnected" />
                    }
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin-top: 5px; width: 100%;">
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText Text="PPK Voltage: " />
                    <RadzenText Text="@($"{ConsoleService.DeviceVoltage.ToString()} mV")" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

    </RadzenSidebar>
    <RadzenBody>
        <RadzenRow Style="height: 100%;">
            <RadzenColumn Style="height: 100%;">

                <RadzenRow>
                    <RadzenColumn>
                        <RadzenChart @ref=radzenChartRef>
                            <RadzenChartTooltipOptions Shared="@sharedTooltip" />
                            <RadzenLineSeries Smooth="@smooth" Data="@ConsoleService.dataPoints" CategoryProperty="Time" Title="Current" LineType="LineType.Solid" ValueProperty="Current">
                                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                            </RadzenLineSeries>
                            <RadzenCategoryAxis Padding="20" />
                            <RadzenValueAxis Formatter="@FormatAsString">
                                <RadzenGridLines Visible="true" />
                                <RadzenAxisTitle Text="MircroAmpers" />
                            </RadzenValueAxis>
                        </RadzenChart>
                    </RadzenColumn>
                </RadzenRow>

            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>


@code {
    private bool isBusy = false;

    bool smooth = false;
    bool sharedTooltip = false;
    bool showDataLabels = false;
    bool showMarkers = true;
    RadzenChart? radzenChartRef;

    public int Voltage { get; set; } = 3300;

    protected override void OnInitialized()
    {
        ConsoleService.InitArrays();
        ConsoleService.DataPointsReceived += DataPointsReceived;
    }

    string FormatAsString(object value)
    {
        return ((double)value).ToString();
    }

    public void DataPointsReceived(object sender, DataPoint[] data)
    {
        if (radzenChartRef != null)
        {
            InvokeAsync(radzenChartRef.Reload);
        }

    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }


    public async Task OnInitPPK2Handler()
    {
        await ConsoleService.FindAndConnectPPK();
    }

    public async Task SetPPK2Voltage()
    {
        await ConsoleService.SetPPK2Voltage(Voltage);
    }

    public async Task StartPPK2()
    {
        await ConsoleService.TurnOnPower();
    }

    public async Task StartPPK2WithGraph()
    {
        await ConsoleService.TurnOnPower(true);
    }

    public async Task StopPPK2()
    {
        await ConsoleService.TurnOffPower();
    }
}
