@page "/"

<PageTitle>Home</PageTitle>

<Container Type="ContainerType.Fluid">

    <h1>Hello, world!</h1>

    <Row Width="RowWidth.Full">
        <Column>
            First Column
        </Column>
        <Column>
            Second Column
        </Column>
        <Column>
            @text1
        </Column>
    </Row>

    <Row>
        <Column>
            <Button OnClick="ShowModal">Show Modal</Button>
        </Column>
    </Row>

    <Modal IsVisible="@IsModalVisible" OnClose="CloseModal" Size="ModalSize.Large" 
           ShowOKButton="true" OnModalOK="OKModal" ShowCancelButton="true" OnModalCancel="CloseModal">

        <ModalTitle OnClose="CloseModal">Modal Title</ModalTitle>
        <ModalBody>
            <Row Width="RowWidth.Full">
                <Column>
                    First Column
                </Column>
                <Column>
                    <TextEdit @bind-Value="text"/>
                </Column>
                <Column>
                    Third Column
                </Column>
            </Row>
        </ModalBody>
        <ModalFooter>Footer content</ModalFooter>

    </Modal>

    <hio_dotnet.UI.BlazorComponents.CHESTER.SearchForChesters @ref=sfcRef/>

</Container>
@code {
    private bool IsModalVisible = false;
    public string text { get; set; } = string.Empty;
    public string text1 { get; set; } = "Third Column";

    public hio_dotnet.UI.BlazorComponents.CHESTER.SearchForChesters? sfcRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await sfcRef?.LoadChesters(new List<string> { "Chester1", "Chester2", "Chester3" });

        await base.OnAfterRenderAsync(firstRender);
    }

    public void ShowModal()
    {
        IsModalVisible = true;
    }

    public void CloseModal()
    {
        IsModalVisible = false;
    }

    public void OKModal()
    {
        IsModalVisible = false;
        text1 = text;
    }
}