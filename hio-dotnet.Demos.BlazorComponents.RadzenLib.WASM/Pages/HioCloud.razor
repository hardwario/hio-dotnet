@using hio_dotnet.UI.BlazorComponents.RadzenLib.CHESTER.HioCloud
@using hio_dotnet.UI.BlazorComponents.RadzenLib.CHESTER.HioCloud.Models

@page "/hiocloud"

@inject LoadingOverlayService LoadingOverlayService

<LoadingOverlay />

<RadzenLayout Style="height: 100%; grid-template-rows: 1fr; grid-template-columns: 1fr auto; grid-template-areas: 'rz-body rz-sidebar'">
    <RadzenSidebar Style="padding: 5px;">
        <HioCloudLoginButton OnLoggedIn="@OnLoggedInHandler" OnLoggingIn="OnLoggingInHandler" Style="margin-top: 5px; width: 100%;" />
    </RadzenSidebar>
    <RadzenBody>
        <RadzenRow Style="height: 100%;">
            <RadzenColumn Style="height: 100%;">

                <RadzenRow>
                    <RadzenColumn Size="3">
                        <HioCloudTreeView @ref=hioCloudTreeViewRef OnOpenMessageRequest="@OnOpenMessageHandler"
                                          OnOpenDeviceRequest="@OnOpenDeviceHandler"
                                          OnOpenSpaceRequest="@OnOpenSpaceHandler" />
                    </RadzenColumn>
                    <RadzenColumn Size="9">
                        <HioCloudTabs @ref=hioCloudTabsRef />
                    </RadzenColumn>
                </RadzenRow>

            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>


@code {
    private bool isBusy = false;
    HioCloudTreeView? hioCloudTreeViewRef;
    HioCloudTabs? hioCloudTabsRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnLoggingInHandler(bool busy)
    {
        isBusy = busy;
        LoadingOverlayService.ShowIfBusy(isBusy);
    }

    public async Task OnLoggedInHandler(bool isLoggedIn)
    {
        isBusy = false;
        LoadingOverlayService.ShowIfBusy(isBusy);
        if (hioCloudTreeViewRef != null)
        {
            await hioCloudTreeViewRef.GetSpaces();
        }
    }

    public async Task OnOpenMessageHandler(Message msg)
    {
        if (hioCloudTabsRef != null)
        {
            await hioCloudTabsRef.AddTab(new OpenedTab()
                {
                    Data = msg,
                    Type = OpenedTabType.Message,
                    Id = msg.Id,
                    Title = msg.Text
                });
        }
    }

    public async Task OnOpenDeviceHandler(Device device)
    {
        if (hioCloudTabsRef != null)
        {
            await hioCloudTabsRef.AddTab(new OpenedTab()
                {
                    Data = device,
                    Type = OpenedTabType.Device,
                    Id = device.Id,
                    Title = device.Name
                });
        }
    }

    public async Task OnOpenSpaceHandler(Space space)
    {
        if (hioCloudTabsRef != null)
        {
            await hioCloudTabsRef.AddTab(new OpenedTab()
                {
                    Data = space,
                    Type = OpenedTabType.Space,
                    Id = space.Id,
                    Title = space.Name
                });
        }
    }
}
