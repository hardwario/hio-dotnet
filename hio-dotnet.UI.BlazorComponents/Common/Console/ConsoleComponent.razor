@using hio_dotnet.UI.BlazorComponents.Basics.Frames
@using hio_dotnet.UI.BlazorComponents.Basics.Buttons
@using hio_dotnet.UI.BlazorComponents.Basics.Edits
@using hio_dotnet.UI.BlazorComponents.Basics.Cards
@using hio_dotnet.UI.BlazorComponents.Basics.Text
@using hio_dotnet.UI.BlazorComponents.Basics

<h4>Console</h4>
<hr />

<Row Width="RowWidth.Full">
    <Column CWidth="ColumnWidth.Twelve">
        <Row Width="RowWidth.Full">
            <Column CWidth="ColumnWidth.Twelve">
                <Card Class="console-card" BackgroundColor="Color.Dark">
                    <CardBody>
                        <Div BackgroundColor="Color.Dark">
                            @foreach (var line in Output)
                            {
                                <Div><Small TextColor="Color.Light" Style="font-size:8px;">@line</Small></Div>
                            }
                        </Div>
                    </CardBody>
                </Card>
            </Column>
        </Row>
        <Row Width="RowWidth.Full">
            <Column CWidth="ColumnWidth.Twelve">
                <Row Width="RowWidth.Full" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Center">
                    <Column CWidth="ColumnWidth.Ten">
                        <TextEdit Value="@command" ValueChanged="OnCommandValueChangedHandler" Placeholder="Type command" @onkeydown="HandleKeyDown" />
                    </Column>
                    <Column CWidth="ColumnWidth.Two" AlignSelf="AlignSelf.End" TextAlignment="TextAlignment.Center">
                        <Button OnClick="SendCommand">Send</Button>
                    </Column>
                </Row>
            </Column>
        </Row>
    </Column>
</Row>
<style>
    .console-card {
        color: #d4d4d4;
        font-family: monospace;
    }
</style>

@code {
    [Parameter] public EventCallback<string> OnSendCommand { get; set; }
    [Parameter] public EventCallback<string> OnNewLineReceived { get; set; }
    [Parameter] public List<string> Output { get; set; } = new List<string>();

    private string command = string.Empty;
    private int historyIndex = -1;
    private List<string> commandHistory = new List<string>();

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendCommand();
        }
        else if (e.Key == "ArrowUp")
        {
            NavigateHistory(1);
        }
        else if (e.Key == "ArrowDown")
        {
            NavigateHistory(-1);
        }
    }

    private void OnCommandValueChangedHandler(string text)
    {
        command = text;
    }

    private async Task SendCommand()
    {
        if (!string.IsNullOrEmpty(command))
        {
            commandHistory.Insert(0, command);
            historyIndex = -1;
            await OnSendCommand.InvokeAsync(command);
            command = string.Empty;
        }
    }

    private void NavigateHistory(int direction)
    {
        if (commandHistory.Count == 0) return;

        historyIndex = Math.Clamp(historyIndex + direction, -1, commandHistory.Count - 1);

        command = historyIndex >= 0 ? commandHistory[historyIndex] : string.Empty;
    }
}
