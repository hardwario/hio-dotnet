@using Services
@using CHESTER.HioCloud.Models
@using hio_dotnet.APIs.HioCloud.Models

@inject DialogService DialogService
@inject HioCloudService HioCloudService
@inject NotificationService NotificationService

@if (IsButtonDisplayed)
{
    <RadzenButton Click="@GetSpaces" Text="Get Spaced" Disabled="@(!HioCloudService.IsLoggedIn)" Style="@Style" class="@Class" ButtonStyle="@ButtonStyle" />
}

<RadzenRow Style="height:100%; margin-top:5px;">
    <RadzenColumn Size="12" Style="height:100%;">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-0">Spaces, Devices and Messages</RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" class="rz-mb-2">Search scope of your available objects</RadzenText>
            <RadzenTree Style="height: 100%;" Data=@HioCloudService.Spaces Expand="@OnExpand" ValueChanged="ObjectClickedHandler" >
                <RadzenTreeLevel TextProperty="@nameof(Space.Name)" ChildrenProperty="Devices" />
                <RadzenTreeLevel TextProperty="@nameof(Device.Name)" ChildrenProperty="Messages" />
                <RadzenTreeLevel TextProperty="@nameof(Message.Text)" HasChildren="@(message => false)" />
            </RadzenTree>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {

    [Parameter] public string Style { get; set; } = string.Empty;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public bool IsButtonDisplayed { get; set; } = false;
    [Parameter] public ButtonStyle ButtonStyle { get; set; } = ButtonStyle.Primary;
    [Parameter] public EventCallback<Space> OnOpenSpaceRequest { get; set; }
    [Parameter] public EventCallback<Device> OnOpenDeviceRequest { get; set; }
    [Parameter] public EventCallback<Message> OnOpenMessageRequest { get; set; }

    public async Task GetSpaces()
    {
        await HioCloudService.LoadSpaces();
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnExpand(TreeExpandEventArgs args)
    {
        if (args.Value is Space space)
        {
            await GetSpaceDevices(space.Id.ToString());
        }
        else if (args.Value is Device device)
        {
            await GetDeviceMessages(device.SpaceId.ToString(), device.Id.ToString());
        }
    }

    private async Task GetSpaceDevices(string spaceId)
    {
        await HioCloudService.LoadSpaceDevices(spaceId);
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetDeviceMessages(string spaceId, string deviceId)
    {
        await HioCloudService.LoadDeviceMessages(spaceId, deviceId);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ObjectClickedHandler(object obj)
    {
        if (obj is Space space)
        {
            if (OnOpenSpaceRequest.HasDelegate)
                await OnOpenSpaceRequest.InvokeAsync(space);
        }
        else if (obj is Device device)
        {
            if (OnOpenDeviceRequest.HasDelegate)
                await OnOpenDeviceRequest.InvokeAsync(device);
        }
        else if (obj is Message message)
        {
            if (OnOpenMessageRequest.HasDelegate)
                await OnOpenMessageRequest.InvokeAsync(message);
        }
    }
}
