@using System.Text.RegularExpressions
@inject NotificationService NotificationService

<div class="rz-p-12 @getAlign()">
    <RadzenFieldset Text="NwkSKey">
        <RadzenRow>
            <RadzenColumn>
                <RadzenTextBox Name="NwkSKey" Value=@Value ValueChanged="@OnValueChangedHandler"
                               Placeholder="Enter NwkSKey"
                               Style="@getStyle()" />
                <RadzenRequiredValidator Component="NwkSKey" Text="NwkSKey is required" />
                <RadzenCustomValidator Component="NwkSKey" Text="Invalid NwkSKey. Must be 32 hex characters." Validator=@(() => ValidateNwkSKey(Value)) Popup="@true" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenFieldset>
</div>

@code {
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string Align { get; set; } = "center";
    private bool isValid = true; // To track validity

    private string getStyle()
    {
        var strbase = "display: block; width: 100%; background-color:";
        if (isValid)
            return strbase + "white";
        else
            return strbase + "lightpink";
        return strbase;
    }

    public bool ValidateNwkSKey(object value)
    {
        string input = value as string;
        var res = !string.IsNullOrEmpty(input) && Regex.IsMatch(input, @"^[0-9A-Fa-f]{32}$");
        isValid = res; // Update validity flag
        if (!res)
        {
            NotificationService.Notify(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Wrong NwkSKey Format",
                    Detail = $"NwkSKey must be 32 hex characters. Do not use '-' between hexs.",
                    Duration = 2000
                });
        }
        return res;
    }

    private async Task OnValueChangedHandler(string value)
    {
        Value = value;
        if (ValidateNwkSKey(value))
        {
            await ValueChanged.InvokeAsync(value);
        }
    }

    public string getAlign()
    {
        if (Align == "left")
            return "rz-text-align-start";
        else if (Align == "right")
            return "rz-text-align-end";
        else
            return "rz-text-align-center";
    }
}
