@using Services
@using hio_dotnet.UI.BlazorComponents.RadzenLib.Common.Models
@page "/"

@inject RemoteConsoleService ConsoleService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
    <!-- Loading overlay -->
    @if (isBusy)
    {
        <RadzenCard Style="z-index: 3; text-align: center; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, .5)">
            <div style="display: flex; justify-content: center; align-items: center; height: 100%; width: 100%;">
                <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                    <Template>Wait</Template>
                </RadzenProgressBarCircular>
            </div>
        </RadzenCard>
    }
</RadzenStack>

<RadzenLayout Style="height: 100%; grid-template-rows: 1fr; grid-template-columns: 1fr auto; grid-template-areas: 'rz-body rz-sidebar'">
    <RadzenSidebar Style="padding: 5px;">
        @if (!ConsoleService.IsPPK2Connected)
        {
            <RadzenButton Click="OnInitPPK2Handler" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
        }
        else
        {
            <RadzenButton Click="OnInitPPK2Handler" Disabled="true" Style="margin-top: 5px; width: 100%;">Init PPK2</RadzenButton>
        }
        <RadzenNumeric @bind-Value=Voltage Min="3300" Max="4000" Style="margin-top: 5px; width: 100%;"></RadzenNumeric>
        <RadzenButton Click="SetPPK2Voltage" Style="margin-top: 5px; width: 100%;">Set Voltage</RadzenButton>
        @if (!ConsoleService.IsDeviceOn)
        {
            <RadzenButton Click="StartPPK2" Style="margin-top: 5px; width: 100%;">Turn On</RadzenButton>
        }
        else
        {
            <RadzenButton Click="StopPPK2" Style="margin-top: 5px; width: 100%;">Turn Off</RadzenButton>
        }

        @if (!ConsoleService.IsConsoleListening)
        {
            <RadzenButton Click="OnInitConsoleHandler" Style="margin-top: 5px; width: 100%;">Init Console</RadzenButton>
        }
        else
        {
            <RadzenButton Click="StopListening"  Style="margin-top: 5px; width: 100%;">Stop Listening</RadzenButton>
        }

        <RadzenButton Click="SaveShellToFile" Style="margin-top: 5px; width: 100%;">Save Console To File</RadzenButton>
        <RadzenButton Click="SaveLogToFile" Style="margin-top: 5px; width: 100%;">Save Log To File</RadzenButton>

        <RadzenRow Style="margin-top: 5px; width: 100%;">
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal">
                    @if (ConsoleService.IsPPK2Connected)
                    {
                        <RadzenText Text="PPK Connected" />
                    }
                    else 
                    {
                        <RadzenText Text="PPK Disconnected" />
                    }
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin-top: 5px; width: 100%;">
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText Text="PPK Voltage: " />
                    <RadzenText Text="@($"{ConsoleService.DeviceVoltage.ToString()} mV")" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <hr style="margin-top: 5px; width: 100%;" />
        <RadzenRow Style="margin-top: 5px; width: 100%;">
            <RadzenColumn>
                <RadzenLabel Text="Console Auto Scroll" Component="shellScrollOption" />
                <RadzenSwitch @bind-Value="isShellScrollingAutomatically" Name="shellScrollOption"/>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin-top: 5px; width: 100%;">
            <RadzenColumn>
                <RadzenLabel Text="Log Auto Scroll" Component="logScrollOption" />
                <RadzenSwitch @bind-Value="isLogScrollingAutomatically" Name="logScrollOption" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin-top: 5px; width: 100%;">
            <RadzenColumn>
                <RadzenLabel Text="Console Font Size" Component="consoleFontSize" />
                <RadzenNumeric @bind-Value="ConsoleFontSize" Min="6" Max="24" Step="1" Name="consoleFontSize" />
            </RadzenColumn>
        </RadzenRow>
        <hr style="margin-top: 5px; width: 100%;" />
        
    </RadzenSidebar>
    <RadzenBody>
        <RadzenRow Style="height: 100%;">
            <RadzenColumn Style="height: 100%;">
                <RadzenRow Style="height: 100%;">
                    <RadzenColumn Style="height: 100%;">
                        <RadzenSplitter Orientation="Orientation.Vertical" style="height: 100%; border: 1px solid rgba(0,0,0,.08);">
                            <RadzenSplitterPane Size="100px">
                                <RadzenSplitter>
                                    <RadzenSplitterPane Size="50%" Min="30px" Max="70%">
                                        <ConsoleComponent @ref=consoleComponentRef 
                                                          TextSize="@ConsoleFontSize" 
                                                          Output="@ConsoleService.ConsoleOutputShell" 
                                                          IsSendButtonDisabled="@isDisabled" 
                                                          OnSendCommand="HandleSendCommand"
                                                          IsActionPanelVisible = "true"
                                                          ActionCommandButtonDataList="@ActionCommandButtonDataList"
                                                          OnActionSendCommandHandler="onSendCommandHandler" />
                                    </RadzenSplitterPane>
                                    <RadzenSplitterPane>
                                        <ConsoleComponent @ref=consoleComponentLogRef TextSize="@ConsoleFontSize" Headline="Log" Output="@ConsoleService.ConsoleOutputLog" HideCommandLine="true" />
                                    </RadzenSplitterPane>
                                </RadzenSplitter>
                            </RadzenSplitterPane>
                        </RadzenSplitter>
                    </RadzenColumn>
                </RadzenRow>

            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>

@code {
    private bool isBusy = false;
    private bool isDisabled = false;
    private bool isLogScrollingAutomatically = true;
    private bool isShellScrollingAutomatically = true;

    private List<string> outputConfig = new List<string>();
    private List<string> output = new List<string>();
    ConsoleComponent? consoleComponentRef;
    ConsoleComponent? consoleComponentLogRef;

    public int ConsoleFontSize { get; set; } = 12;

    public int Voltage { get; set; } = 3600;

    public List<ActionCommandButtonData> ActionCommandButtonDataList { get; set; } = new List<ActionCommandButtonData>()
    {
        new ActionCommandButtonData
        {
            ButtonText = "Config Show",
            Commands = new List<string>{ "config show" },
            IsWithDialog = false,
            PositionX = 0,
            PositionY = 0,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Info Show",
            Commands = new List<string>{ "info show" },
            IsWithDialog = false,
            PositionX = 1,
            PositionY = 0,
        },
        new ActionCommandButtonData
        {
            ButtonText = "LTE Params",
            Commands = new List<string>{
                "lte imsi",
                "lte iccid",
                "lte imei",
                "lte fw-version"
            },
            IsWithDialog = false,
            PositionX = 2,
            PositionY = 0,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Config Save",
            Commands = new List<string>{ "config save" },
            IsWithDialog = true,
            DialogTitle = "Config save and reboot",
            DialogDescription = "Are you sure you want to send save config command to the MCU? It will perform reboot",
            PositionX = 0,
            PositionY = 1,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Reboot Cold",
            Commands = new List<string>{ "kernel reboot cold" },
            IsWithDialog = true,
            DialogTitle = "Cold Reboot of MCU",
            DialogDescription = "Are you sure you want to send reboot command to the MCU?",
            PositionX = 1,
            PositionY = 1,
        },
        new ActionCommandButtonData
        {
            ButtonText = "Reboot Warm",
            Commands = new List<string>{ "kernel reboot warm" },
            IsWithDialog = true,
            DialogTitle = "Warm Reboot of MCU",
            DialogDescription = "Are you sure you want to send reboot command to the MCU?",
            PositionX = 2,
            PositionY = 1,
        }
    };


    protected override void OnInitialized()
    {
        ConsoleService.InitArrays();
        ConsoleService.NewRTTMessageLineReceived += NewLineReceived;
        ConsoleService.OnIsBusy += (s, e) =>
        {
            isBusy = e;
            Refresh();
        };

        if (ConsoleService.IsConsoleListening)
        {
            isDisabled = false;
        }
        else
        {
            isDisabled = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ConsoleService.IsConsoleListening)
        {
            isDisabled = false;
        }
        else
        {
            isDisabled = true;
        }
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (consoleComponentRef != null)
            {
                consoleComponentRef.MaxHeight = 650;
                consoleComponentRef.MinHeight = 650;
            }
            if (consoleComponentLogRef != null)
            {
                consoleComponentLogRef.MaxHeight = 650;
                consoleComponentLogRef.MinHeight = 650;
            }
            await Refresh();

            ConsoleService.OnIsJLinkConnected += (s, e) =>
            {
                isDisabled = false;
                InvokeAsync(StateHasChanged);
            };
            ConsoleService.OnIsJLinkDisconnected += (s, e) =>
            {
                isDisabled = true;
                InvokeAsync(StateHasChanged);
            };
        }
    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnInitConsoleHandler()
    {
        await ConsoleService.StartListening();
    }

    public async Task StopListening()
    {
        await ConsoleService.StopListening();
    }

    public async Task OnInitPPK2Handler()
    {
        await ConsoleService.FindAndConnectPPK();
    }

    public async Task SetPPK2Voltage()
    {
        await ConsoleService.SetPPK2Voltage(Voltage);
    }

    public async Task StartPPK2()
    {
        await ConsoleService.TurnOnPower();
    }

    public async Task StopPPK2()
    {
        await ConsoleService.TurnOffPower();
    }

    public void NewLineReceived(object sender, Tuple<string, MultiRTTClientBase> data)
    {
        InvokeAsync(async () =>
        {
            await InvokeAsync(StateHasChanged);
            if (isShellScrollingAutomatically && consoleComponentRef != null)
            {
                await consoleComponentRef.Refresh();
            }
            if (isLogScrollingAutomatically && consoleComponentLogRef != null)
            {
                await consoleComponentLogRef.Refresh();
            }
        });
    }

    private async Task HandleSendCommand(string command)
    {
        await ConsoleService.SendCommand(command.ToLower().Trim() + "\n");
    }

    private async Task SaveLogToFile()
    {
        await ConsoleService.SaveConsoleLogToFile();
    }

    private async Task SaveShellToFile()
    {
        await ConsoleService.SaveConsoleShellToFile();
    }

    private async Task onSendCommandHandler(List<string> commands)
    {
        foreach(var command in commands)
        {
            await ConsoleService.SendCommand(command);
        }
    }

}