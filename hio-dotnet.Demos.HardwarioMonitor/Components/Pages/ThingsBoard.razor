@using hio_dotnet.UI.BlazorComponents.RadzenLib.ThingsBoard
@using hio_dotnet.UI.BlazorComponents.RadzenLib.Services
@using hio_dotnet.APIs.ThingsBoard.Models
@using hio_dotnet.UI.BlazorComponents.RadzenLib.ThingsBoard.Models

@inject ThingsBoardService ThingsBoardService
@inject LoadingOverlayService LoadingOverlayService

@page "/thingsboard"

<LoadingOverlay />

<RadzenLayout Style="grid-template-rows: 1fr; grid-template-columns: 1fr auto; grid-template-areas: 'rz-body rz-sidebar'">
    <RadzenSidebar Style="padding: 5px;">
        <RadzenRow>
            <RadzenColumn>
                <ThingsBoardLoginComponent OnLoggedIn="@OnLoggedInHandler" OnLoggingIn="OnLoggingInHandler" Style="margin-top: 5px; width: 100%;" />
            </RadzenColumn>
        </RadzenRow>
        @if (ThingsBoardService.IsLoggedIn)
        {
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText Text="User First Name: " />
                    <RadzenText Text="@ThingsBoardService.User.FirstName" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText Text="User Last Name: " />
                    <RadzenText Text="@ThingsBoardService.User.LastName" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenText Text="User Id: " />
                    <RadzenText Text="@(ThingsBoardService.User?.Id?.Id.ToString())" />
                </RadzenColumn>
            </RadzenRow>
        }

    </RadzenSidebar>
    <RadzenBody Style="height: 100%;">
        <RadzenRow Style="height: 100%;">
            <RadzenColumn Style="height: 100%;">
                <RadzenSplitter Orientation="Orientation.Vertical" style="height:100%; border: 1px solid rgba(0,0,0,.08);">
                    <RadzenSplitterPane Size="100px">
                        <RadzenSplitter Style="height:100%;">
                            <RadzenSplitterPane Size="40%" Min="30px" Max="70%">
                                @if (ThingsBoardService.IsLoggedIn)
                                {
                                    <ThingsBoardDevicesList OnOpenDevice="onOpenDeviceHandler" />
                                }
                            </RadzenSplitterPane>
                            <RadzenSplitterPane Style="height:100%; overflow-y:auto;">
                                <ThingsBoardTabs @ref=thingsBoardTabsRef />
                            </RadzenSplitterPane>
                        </RadzenSplitter>
                    </RadzenSplitterPane>
                </RadzenSplitter>
            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>


@code {
    private bool isBusy = false;

    ThingsBoardTabs? thingsBoardTabsRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnLoggingInHandler(bool busy)
    {
        isBusy = busy;
        LoadingOverlayService.Show();
    }

    public async Task OnLoggedInHandler(bool isLoggedIn)
    {
        LoadingOverlayService.Hide();
        isBusy = false;

        await ThingsBoardService.GetDevices();

        await InvokeAsync(StateHasChanged);

    }

    private async Task onOpenDeviceHandler(Device device)
    {
        if (thingsBoardTabsRef != null)
        {
            await thingsBoardTabsRef.AddTab(new DeviceOpenedTab()
                {
                    Id = Guid.NewGuid(),
                    Title = device.Name,
                    Type = OpenedTabType.Device,
                    Data = device
                });
        }
    }

}
